// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project.Data;

namespace project.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230422083551_baiasm")]
    partial class baiasm
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "A",
                            ConcurrencyStamp = "9a1311e9-720c-408d-af15-e76eb2d26966",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "B",
                            ConcurrencyStamp = "3afc87d9-b32a-40bf-8b32-9aa57a5a1f84",
                            Name = "Customer",
                            NormalizedName = "Customer"
                        },
                        new
                        {
                            Id = "C",
                            ConcurrencyStamp = "05d8bbdf-37dc-49d7-a545-1463c1f9037a",
                            Name = "StoreOwner",
                            NormalizedName = "StoreOwner"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "364ecb93-b608-4967-86a9-5d4ee4042842",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "admin@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAFDqKvDttn0q31gNojeMmvJ3vxIuMVGDxlAkNLYCaXRtHOHfJpnkpH89KGcGvAbbw==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0e44e977-9e8d-40be-bfa8-7541fc6f9dd1",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "684ec516-c02d-4635-a3cc-accae2efff21",
                            Email = "customer1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "customer1@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHMDhCjaP1Dr+F3SWHVMXBEchKKfVDLt4z6AstelGWD7QA+Qztlkr66kqfeeD7XUYQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "b14144d9-487d-41cd-8669-7bafb21dcaa4",
                            TwoFactorEnabled = false,
                            UserName = "customer1@gmail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5141f623-bbbd-4818-997d-3076665698bf",
                            Email = "storeOwner@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "storeOwner@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAS6A1nOzLVMDu0f7LINX6KKK7MU2QqsB5wVCw8il4JX01yhanCZUHbOuDgr3hhG1g==",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "35bb41ce-23fb-4703-a8cd-babee36e6f1c",
                            TwoFactorEnabled = false,
                            UserName = "storeOwner@gmail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd309948-80ba-4060-b7f5-2833a4d24a21",
                            Email = "customer2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "customer2@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMP1cQLrpqunMOS8ogB/c+65DOI4CmvbU8X+dfq4Di0aMwKP1/WRWCLjy9KXfeKIgg==",
                            PhoneNumber = "0897654321",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7a629cdd-6b6c-4b45-920f-e3811356396b",
                            TwoFactorEnabled = false,
                            UserName = "customer2@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "A"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "B"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "C"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "B"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("project.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("project.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Iron Man and Captain America: two core members of the Avengers, the world’s greatest super hero team. When a tragic battle blows a hole in the city of Stamford, killing hundreds of people, the U.S. government demands that all super heroes unmask and register their powers. To Tony Stark–Iron Man–it’s a regrettable but necessary step. To Captain America, it’s an unbearable assault on civil liberties.",
                            Image = "https://salt.tikicdn.com/cache/750x750/ts/product/9e/b3/41/0c06634308a72a8a86cacfcde61db50e.jpg.webp",
                            Name = "Marvel's Civil War",
                            Price = 12.0,
                            Stock = 512
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "The main characters are already on the dome, Luffy's group confronts Kaido & Big Mom. In front of the strongest alliance in the world, is there any miracle to help them win? What future will open up for the warriors after this extreme battle?",
                            Image = "https://salt.tikicdn.com/cache/750x750/ts/product/0e/0d/d0/6984eafe17135038efa10f7a567a06f3.jpg.webp",
                            Name = "One Pice",
                            Price = 12.0,
                            Stock = 512
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Kakashi was shaken when he realized that Obito - his former teammate - was the masked man. But Naruto's words helped Kakashi rise again! With the motto \"Absolutely not letting teammates die\", Naruto's group has started to counterattack! However, the Ten-Tails eventually revived",
                            Image = "https://salt.tikicdn.com/cache/750x750/ts/product/12/4a/28/f70efa285c1dd534dcf196d79f1ffe11.jpg.webp",
                            Name = "Naruto",
                            Price = 12.0,
                            Stock = 512
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "The special-ranked spirit Hanami and the others had withdrawn from the spell school, but the fingers of Sukuna and the special-ranked \"Nine-Three-Grade\" were stolen. The Nine Realms acquires an entity and becomes a new threat. But Itadori and the others, unaware of that danger, still set out on a mission to destroy the \"Spirit that appeared at the door\"!?",
                            Image = "https://salt.tikicdn.com/cache/750x750/ts/product/6b/98/82/8d6ef80eb54c5fb1e2d8f6e74de9ca6c.jpg.webp",
                            Name = "Jujutsu kaisen",
                            Price = 12.0,
                            Stock = 512
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "blalablablabbabababababababababbabababababababababbaba",
                            Image = "https://i.pinimg.com/564x/61/80/fe/6180fe8665d03988e1f2da907189a943.jpg",
                            Name = "Harry Potter",
                            Price = 20.0,
                            Stock = 10
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "HBO’s hit series A GAME OF THRONES is based on George R R Martin’s internationally bestselling series A SONG OF ICE AND FIRE, the greatest fantasy epic of the modern age. A GAME OF THRONES is the first volume in the series.",
                            Image = "https://salt.tikicdn.com/cache/750x750/ts/product/e9/f7/3e/8d76728ca02b8cc922f889827bd6ea51.jpg.webp",
                            Name = "A Game of Thrones",
                            Price = 30.0,
                            Stock = 421
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "As part of the search for a serial murderer nicknames \"Buffalo Bill,\" FBI trainee Clarice Starling is given an assignment. She must visit a man confined to a high-security facility for the criminally insane and interview him.",
                            Image = "https://salt.tikicdn.com/cache/750x750/media/catalog/product/t/h/the-silence-of-the-lambs.jpg.webp",
                            Name = "The silence of the lambs",
                            Price = 30.0,
                            Stock = 235
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "blalablablabbabababababababababbabababababababababbaba",
                            Image = "https://salt.tikicdn.com/cache/750x750/ts/product/af/81/cf/97eaacaddcaa94d8f00c1a148010deaa.jpg.webp",
                            Name = "Sherlock Holmes - The Red Tower",
                            Price = 30.0,
                            Stock = 123
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Description = "English Grammar synthesizes important grammar topics that students need to master. Grammar topics are presented clearly and in detail. After each grammar topic, there are exercises & answers to help students consolidate what they have learned, and at the same time check their results.",
                            Image = "https://salt.tikicdn.com/cache/750x750/ts/product/e1/04/31/7763d9035552760f627c34acfec0e12f.jpg.webp",
                            Name = "English Grammar Explanation",
                            Price = 10.0,
                            Stock = 135
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Description = "Listening comprehension is one of the skills that requires concentration and practice of learners. Practice listening to English vocabulary by topic will provide exercises with advanced level, which is a useful document for those who want to improve their listening comprehension through learning vocabulary.",
                            Image = "https://salt.tikicdn.com/cache/750x750/ts/product/d5/53/0e/fc00028419754638dd5b250abbcb0de7.jpg.webp",
                            Name = "Self-study 2000 English Vocabulary",
                            Price = 10.0,
                            Stock = 146
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Description = "This book will discuss about critical thinking and also help you to improve it",
                            Image = "https://salt.tikicdn.com/cache/750x750/ts/product/22/cb/a9/524a27dcd45e8a13ae6eecb3dfacba7c.jpg.webp",
                            Name = "Practice Critical Thinking",
                            Price = 10.0,
                            Stock = 131
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Description = "Everyone thinks about sex. However, we rarely notice how sex in humans differs from the reproductive habits of other species. In Why Is Sex Fun?",
                            Image = "https://salt.tikicdn.com/cache/750x750/ts/product/81/3d/4e/4d4a4ca625cb71e39c5a83bb764c3fe1.jpg.webp",
                            Name = "Why is sex fun ?",
                            Price = 50.0,
                            Stock = 846
                        });
                });

            modelBuilder.Entity("project.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Comic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Novel"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Education"
                        });
                });

            modelBuilder.Entity("project.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStock")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("project.Models.Book", b =>
                {
                    b.HasOne("project.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("project.Models.Order", b =>
                {
                    b.HasOne("project.Models.Book", "Book")
                        .WithMany("Orders")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
